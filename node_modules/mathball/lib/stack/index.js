"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var validate = require("../validation/number");

var Stack = function () {
    function Stack() {
        _classCallCheck(this, Stack);

        this.stack = [];
    }

    _createClass(Stack, [{
        key: "push",
        value: function push(data) {
            validate(data, 'Stack.push');
            this.stack.push(data);
        }
    }, {
        key: "pop",
        value: function pop() {
            if (this.size() === 0) {
                return "Stack Underflow";
            } else {
                return this.stack.pop();
            }
        }
    }, {
        key: "isEmpty",
        value: function isEmpty() {
            return this.size() === 0;
        }
    }, {
        key: "head",
        value: function head() {
            if (this.size() === 0) {
                return "Empty Stack";
            } else {
                return this.stack[this.size() - 1];
            }
        }
    }, {
        key: "size",
        value: function size() {
            return this.stack.length;
        }
    }, {
        key: "copy",
        value: function copy() {
            var internal = new Stack();

            for (var i = 0; i < this.size(); i++) {
                internal.push(this.stack[i]);
            }

            return internal;
        }
    }, {
        key: "display",
        value: function display() {
            var temp = this.stack.reverse().join(' ');
            this.stack.reverse();
            return temp;
        }
    }]);

    return Stack;
}();

module.exports = Stack;